<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.mydevnotebook.com/blog</id>
    <title>My Dev Notebook Blog</title>
    <updated>2022-02-14T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.mydevnotebook.com/blog"/>
    <subtitle>My Dev Notebook Blog</subtitle>
    <icon>https://www.mydevnotebook.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[AWS EC2 Instance Types]]></title>
        <id>/2022/02/14/AWS-EC2-Instance-Types</id>
        <link href="https://www.mydevnotebook.com/blog/2022/02/14/AWS-EC2-Instance-Types"/>
        <updated>2022-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[How to understand AWS EC2 instance type codes]]></summary>
        <content type="html"><![CDATA[<p>To try and make it easier to select an instance type, AWS uses a set format for instance type naming.
This article will help you understand how AWS breaks down the instance type into families, generations,
capabilities and overall size.</p><p><img src="./AWS_EC2_codes.png" alt="EC2 Instance Codes"/></p><p>EC2 is Amazon Web Services’ (AWS) <strong>Elastic Compute Cloud</strong>.
As AWS has to support an almost endless set of possible workloads, they provide hundreds of different instance types.<br/>
<!-- -->Having different instance types means you only use and pay for resources that you need,
rather than over provisioning and paying for unused resource.</p><blockquote><p>EC2 is an abbreviation for “elastic compute cloud”.
Where the same letter appears more than once, a count of that letter is used (e.g. two consecutive C&#x27;s become C2)
Another example being S3 : Simple Storage Service - 3 S&#x27;s</p></blockquote><p>Pretty much the only constant thing when working with AWS is that things change.
This article therefore is only meant to help you understand the EC2 instance code format rather than explaining every
possible instance type available.
You can see what instance types are available here: <a href="https://aws.amazon.com/ec2/instance-types/">Amazon EC2 Instance Types - Amazon Web Services</a> </p><h2>Instance code format</h2><p>As you can see from the above image, the instance code is divided into three or four sections (one section is optional).  </p><h3>Family</h3><p>The first section is typically a single letter (but not always) and denotes the main instance type family.
The family lets you choose a type broadly suited to your tasks, and the most popular ones are discussed below (e.g. CPU optimised, memory optimised etc.)</p><h3>Generation</h3><p>The higher the generation number the newer the instance type. You should usually choose the latest available
generation as that provides the newest features and generally can cost less. i.e. a newer generation might offer faster
CPU&#x27;s, or more CPU, or more memory, or some other combination of features with better cost optimisation.
The exception to this rule might be if you only want to use the AWS free tier, as (at the time of writing)
the <code>t2.micro</code> is free tier eligible, but the <code>t3.micro</code> is not.</p><h3>Additional Features</h3><p>This is an <strong>optional</strong> code. For example, <code>R6gd</code> instances offer
<em>local NVMe-based SSDs are physically connected to the host server and provide block-level storage that is coupled to the lifetime of the instance</em>,
where <code>R6g</code> is <em>EBS-Only storage</em>.</p><h3>Instance Size</h3><p>The part after the period (dot) defines the instance size. This is usually a T-Shirt style size, but there are other options
too like <em>.metal</em> for example.</p><h2>Popular Family Types</h2><h3>A - Arm Processors</h3><table><thead><tr><th></th><th>Description</th></tr></thead><tbody><tr><td>Characteristics</td><td>64-bit Arm cores using Graviton processors.</td></tr><tr><td>mnemonic</td><td><strong>a</strong> for Arm processor</td></tr><tr><td>example</td><td>a1.large : 2 CPU and 4 GiB Mem</td></tr></tbody></table><h3>T - General Purpose, Burstable</h3><table><thead><tr><th></th><th>Description</th></tr></thead><tbody><tr><td>Characteristics</td><td>T instances are general purpose that are “burstable”. If you use an “m” or “c” class type, you’re paying for the full capacity of the instance whether it’s in use or not. As a lot of workloads can have spikes of demand and longer periods of low demand, you can potentially save money by using a T type. T type machines have a baseline of capacity. When your system operates below the baseline, you earn CPU credits. When your system comes under high load, it can “burst” to use all the CPU by spending credits (or borrowing up to a days worth of credits depending on how you configure your instance).</td></tr><tr><td>mnemonic</td><td><strong>t</strong> for bursTable</td></tr><tr><td>example</td><td>t3.large : 2 CPU 8 GiB mem (36 CPU credits/hr)</td></tr></tbody></table><h3>M - General Purpose, Medium</h3><table><thead><tr><th></th><th>Description</th></tr></thead><tbody><tr><td>Characteristics</td><td>General purpose machines optimised balance of CPU, memory and network performance</td></tr><tr><td>mnemonic</td><td><strong>m</strong> for medium</td></tr><tr><td>example</td><td>m5.large : 2 CPU 8 GiB mem</td></tr></tbody></table><h3>C - General Purpose, Compute</h3><table><thead><tr><th></th><th>Description</th></tr></thead><tbody><tr><td>Characteristics</td><td>Optimised for compute intensive workloads.</td></tr><tr><td>mnemonic</td><td><strong>c</strong> for Compute</td></tr><tr><td>example</td><td>c5.large : 2 CPU 4 GiB mem</td></tr></tbody></table><h3>R - General Purpose, Memory</h3><table><thead><tr><th></th><th>Description</th></tr></thead><tbody><tr><td>Characteristics</td><td>optimised for memory.</td></tr><tr><td>mnemonic</td><td><strong>r</strong> for RAM</td></tr><tr><td>example</td><td>r5.large : 2 CPU 16GiB mem</td></tr></tbody></table><h3>Others</h3><h4>Accelerated computing</h4><p>Optimised for machine learning, graphics, image processing etc. Some examples include the P<!-- -->[ictures]<!-- -->, inf<!-- -->[erence]<!-- --> and g<!-- -->[raphics]<!-- --> types.</p><h4>Storage</h4><p>Instances optimised for storage, i.e. where high sequential read and writes operations on large data sets is desirable
Examples include D<!-- -->[ense]<!-- --> (or D<!-- -->[ata]<!-- -->), I<!-- -->[ops]<!-- -->, H<!-- -->[dd]<!-- --> based and others</p>]]></content>
        <author>
            <name>Martyn Butterworth</name>
            <uri>https://github.com/MartynButty</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker build fail with VPN]]></title>
        <id>/2021/12/14/Docker-VPN-Network-Fix</id>
        <link href="https://www.mydevnotebook.com/blog/2021/12/14/Docker-VPN-Network-Fix"/>
        <updated>2021-12-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A possible solution to docker build failures that require resources over a VPN]]></summary>
        <content type="html"><![CDATA[<p>Docker Desktop does a great job of taking care of all the networking for you and usually <em>“just works”</em>, even if you are connected to a corporate VPN.</p><p>Sometimes you may encounter difficulties which usually manifest as the <strong>build stage failing</strong>. This can happen when part of your build process requires resources that are only available when connected via your company VPN (e.g. internal package server).</p><p><img src="./Docker_VPN.png" alt="Docker VPN"/></p><h2>The Problem</h2><h3>Tl;dr</h3><p>Docker may have allocated an internal network range which clashes with your VPN.</p><h3>Detailed example</h3><p>Your project has dependancies on an internal server which might have an IP address of <code>172.17.2.79</code>. This is a <a href="https://en.wikipedia.org/wiki/Private_network">private network</a>) which is only accessible while connected to the companies private VPN.
Docker has created its own internal network which is using the  <code>172.17.0.0/16</code> range of addresses.
The build process tries to access your companies private package server at <code>172.17.2.79</code>.  The process is running within the private docker network. It therefore thinks the server should be available on the local docker network. It is also unable to send any traffic via the VPN due to the overlap or clash of the network range.</p><h2>Confirming this is the problem</h2><p>To confirm the above scenario is indeed the root cause of the docker build failure, we need to compare the subnet docker is using against that in use by the VPN.
<strong>### Get Docker Network</strong>
First, list all the available docker networks</p><pre><code>$docker network ls
</code></pre><p>which should output something similar to</p><pre><code>NETWORK ID     NAME      DRIVER    SCOPE
ceb424d5d73d   bridge    bridge    local
ad6318517651   host      host      local
a2cfb19e8122   none      null      local
</code></pre><p>We’re interested in the “bridge” network, so we’ll inspect it by using it’s ID:</p><pre><code>$docker network inspect ceb424d5d73d
</code></pre><p>which should contain something like the following in its output</p><pre><code>&quot;Config&quot;: [
    {
        &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;
    }
]
</code></pre><p>So we know that in the above case, docker is using the network range <code>172.17.0.0/16</code>
<strong>### Get VPN Network</strong>
Next we need to find out what network the VPN is using. The below should work on a MacBook Pro or linux. If you’re running on Windows, <code>ipconfig</code> may work better.
From a terminal enter the command <code>$ifconfig</code> or <code>$netstat -i</code> and look for a <code>utun*</code> entry with an IP address. For example, doing <code>$netstat -i</code> might output:</p><pre><code>utun3      1500  &lt;Link#17&gt;                      2298484     0   754726     0     0
utun3      1500  172.17.144/22 172.17.146.96    2298484     -   754726     -     -
</code></pre><p>This tells us the the VPN is using the network range <code>172.17.144/22</code>.
If you can remember your <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#IPv4_CIDR_blocks">CIDR blocks</a>, you’ll see that the docker network collides with that of the VPN. This means that docker will be unable to use the VPN network to get to our internal server which has the address <code>172.17.2.79</code>.</p><h2>Docker Network Fix</h2><p>To resolve the above problem, we can change the address pool used by the docker daemon.
With docker desktop, the easiest way to achieve this is to open the docker desktop dashboard (UI), click the “settings” gear cog in the top right of the screen to view the preferences screen. Select “Docker Engine” from the left hand menu, which should show some JSON config. Add the below section of config into the existing JSON config (keeping what’s already there), and click the “Apply &amp; Restart” button</p><pre><code>&quot;default-address-pools&quot;: [
    {
      &quot;base&quot;: &quot;172.240.0.0/16&quot;,
      &quot;size&quot;: 24
    }
  ],
</code></pre><p>Now if you repeat the steps to <a href="#Get-Docker-Network">Get Docker Network</a> (note, the network ID most likely changed!), you should see that docker now uses subnet <code>172.240.0.0/24</code>, and <code>docker build</code> should now be able to complete steps such as <code>dotnet build</code> which would have previously failed to reach the internal server</p>]]></content>
        <author>
            <name>Martyn Butterworth</name>
            <uri>https://github.com/MartynButty</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Computer Memory Types]]></title>
        <id>/2021/11/06/memory</id>
        <link href="https://www.mydevnotebook.com/blog/2021/11/06/memory"/>
        <updated>2021-11-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[computer memory types and considerations from a tinyML perspective]]></summary>
        <content type="html"><![CDATA[<p>Here is an overview of some common types of computer memory. Although general in nature, this page is more about considerations
you may need to make when dealing with machine learning on a microcontroller running ML perspective (TinyML).</p><h2>What is it</h2><p>Computers operate on <strong>bits</strong> which can take the value zero or one.</p><p>To be more useful, these bits are grouped into <strong>bytes</strong>. One byte comprises 8 bits, which can then represent things like letters
or weights in a neural network (NN). </p><p>Microcontrollers and CPU&#x27;s read and write bytes to memory.  A memory address is a hexadecimal value that tells the
cpu/microcontroller etc where the memory it is looking for is located.</p><h2>Types of memory</h2><h3>Flash</h3><p>Flash memory is non volatile (it won&#x27;t lose the stored information when powered down). It is used to store program code,
machine learning (ML) model weights etc. </p><p>The process of saving to flash memory is slow and also gradually degrades the memory over time, therefore flash memory
is better suited to read only use, and only overwritten when reprogramming (a microcontroller)</p><h3>RAM</h3><p>RAM is volatile (the stored information is lost when powered off). It is used for temporary storage of variables like
input and output buffers and intermediate tensors. RAM is much faster than flash for read/write operations, so is ideal
for use as primary memory during code execution</p><h3>Types of RAM</h3><h4>Dynamic RAM (DRAM)</h4><p>DRAM uses a single transistor and capacitor to store a bit. As the capacitor quickly loses charge, it must be periodically
refreshed to prevent the stored information being lost. This usually occurs between read and write operations. DRAM is
most suitable for main memory in modern computers.</p><h4>Static RAM (SRAM)</h4><p>SRAM uses six transistors to store each bit. It is able to maintain the stored information without refreshing. SRAM is
more expensive than DRAM on account of the number of transistors required, but is faster and requires less power due to
not needing to refresh. SRAM is therefore more suitable to caches, and is commonly used as main memory on microcontrollers.</p><h4>Registers</h4><p>A third type of RAM is a register. A special purpose register is typically for low level computing functions like the program
counter and stack pointer. General purpose registers are used to store values and memory addresses. It is unlikely you
will need to play around with registers as a tinyML engineer unless you are working at the assembly code level.</p>]]></content>
        <author>
            <name>Martyn Butterworth</name>
            <uri>https://github.com/MartynButty</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSDL Glossary]]></title>
        <id>/2021/10/02/wsdl</id>
        <link href="https://www.mydevnotebook.com/blog/2021/10/02/wsdl"/>
        <updated>2021-10-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is WSDL]]></summary>
        <content type="html"><![CDATA[<h2>What is WSDL</h2><p>Web services description language (WSDL) is an XML document that describes a web service. WSDL is often pronounced &quot;wizdul&quot;.
It describes what operations a web service provides, the structure of the messages it sends and receives, and how to send
those messages. This article is a very brief overview of the common WSDL elements. If you are new to WSDL, you may prefer
to read <a href="https://msdn.microsoft.com/en-us/library/ms996486.aspx" title="Understanding WSDL">Understanding WSDL</a>.</p><h2>Core WSDL Elements</h2><h3>Definition</h3><p>The <code>&lt;definitions&gt;</code> element is the WSDL&#x27;s root XML element. It typically contains several other elements including
<a href="#types">types</a> , <a href="#message">message</a>, <a href="#portType">portType</a>, <a href="#binding">binding</a> and <a href="#service">service</a>.</p><h3>Types</h3><p>The <code>&lt;types&gt;</code> element contains XML schema type definitions (xsd). The xsd&#x27;s describe the structure of the XML sent and
received by the web service.</p><h3>Message</h3><p>A message is an XML document that can be sent or received by the web service. A message is usually associated with one
or more <a href="#operation">operation</a>. For example, an operation to <code>createNewOrder</code> might have an input message <code>newOrder</code>
and an output message <code>orderStatus</code>.</p><h3>PortType (Interfac</h3><p>The <code>&lt;portType&gt;</code> element is best thought of as an interface, and will be renamed as such in version 1.2 of the WSDL
specification. It contains one or more <code>&lt;operation&gt;</code> elements.</p><h3>Operation</h3><p>An <code>&lt;operation&gt;</code> element defines an operation with the web service. It groups together the <a href="#message">message</a> elements
that can be passed to or from the web service. An operation can have an input and output message (request-response), or
it can just define an input message (one-way), send an output message only (notification) or send an output message to
ask for an input message (solicit-response). The operation may also define a fault message too.</p><h3>Binding</h3><p>A <code>&lt;binding&gt;</code> element is a collection of one or more <code>operations</code>. It describes how an operation is implemented. It
defines the communication protocol (e.g. http), style of service (document or rpc), and the <code>SOAPAction</code> HTTP header for
the defined operations.</p><h3>Document &amp; RPC</h3><p>The document style indicates that the SOAP body will contain an XML document (and is able to be validated by the previously
defined xsd&#x27;s). An RPC style indicates that the SOAP body will contain an XML representation of a method call. It includes
the method name and parameters of the method to generate the XML structure. Follow this link for a more in-depth discussion
on <a href="http://java.globinch.com/enterprise-java/web-services/soap-binding-document-rpc-style-web-services-difference/" title="Document vs RPC">Document and RPC style web services</a></p><h3>Service</h3><p>The <code>&lt;service&gt;</code> element defines the endpoint (port) that exposes a particular binding. I.e. the URL to use to call an
operation within the binding</p><h3>Example WSDL Document</h3><pre><code class="language-xml">&lt;definitions name=&quot;EndorsementSearch&quot;  
 targetNamespace=&quot;http://namespaces.snowboard-info.com&quot;  
 xmlns:es=&quot;http://www.snowboard-info.com/EndorsementSearch.wsdl&quot;  
 xmlns:esxsd=&quot;http://schemas.snowboard-info.com/EndorsementSearch.xsd&quot;  
 xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot;  
 xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;  
&gt;  
  
 &lt;!-- omitted types section with content model schema info \--&gt;  
  
 &lt;message name=&quot;GetEndorsingBoarderRequest&quot;&gt;  
  &lt;part name=&quot;body&quot; element=&quot;esxsd:GetEndorsingBoarder&quot;/&gt;  
 &lt;/message&gt;  
  
 &lt;message name=&quot;GetEndorsingBoarderResponse&quot;&gt;  
  &lt;part name=&quot;body&quot; element=&quot;esxsd:GetEndorsingBoarderResponse&quot;/&gt;  
 &lt;/message&gt;  
  
 &lt;portType name=&quot;GetEndorsingBoarderPortType&quot;&gt;  
  &lt;operation name=&quot;GetEndorsingBoarder&quot;&gt;  
   &lt;input message=&quot;es:GetEndorsingBoarderRequest&quot;/&gt;  
   &lt;output message=&quot;es:GetEndorsingBoarderResponse&quot;/&gt;  
   &lt;fault message=&quot;es:GetEndorsingBoarderFault&quot;/&gt;  
  &lt;/operation&gt;  
 &lt;/portType&gt;  
  
 &lt;binding name=&quot;EndorsementSearchSoapBinding&quot; type=&quot;es:GetEndorsingBoarderPortType&quot;&gt;  
  &lt;soap:binding style=&quot;document&quot; transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;  
  &lt;operation name=&quot;GetEndorsingBoarder&quot;&gt;  
   &lt;soap:operation soapAction=&quot;http://www.snowboard-info.com/EndorsementSearch&quot;/&gt;  
   &lt;input&gt;  
    &lt;soap:body use=&quot;literal&quot; 
                   namespace=&quot;http://schemas.snowboard-info.com/EndorsementSearch.xsd&quot;/&gt;  
   &lt;/input&gt;  
   &lt;output&gt;  
    &lt;soap:body use=&quot;literal&quot; 
                   namespace=&quot;http://schemas.snowboard-info.com/EndorsementSearch.xsd&quot;/&gt;  
   &lt;/output&gt;  
   &lt;fault&gt;  
    &lt;soap:body use=&quot;literal&quot; 
                   namespace=&quot;http://schemas.snowboard-info.com/EndorsementSearch.xsd&quot;/&gt;  
   &lt;/fault&gt;  
  &lt;/operation&gt;  
 &lt;/binding&gt;  
  
 &lt;service name=&quot;EndorsementSearchService&quot;&gt;  
  &lt;documentation&gt;snowboarding\-info.com Endorsement Service&lt;/documentation&gt;  
  &lt;port name=&quot;GetEndorsingBoarderPort&quot; binding=&quot;es:EndorsementSearchSoapBinding&quot;&gt;  
   &lt;soap:address location=&quot;http://www.snowboard-info.com/EndorsementSearch&quot;/&gt;  
  &lt;/port&gt;  
 &lt;/service&gt;  
&lt;/definitions&gt;
</code></pre>]]></content>
        <author>
            <name>Martyn Butterworth</name>
            <uri>https://github.com/MartynButty</uri>
        </author>
    </entry>
</feed>