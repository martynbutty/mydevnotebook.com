"use strict";(self.webpackChunkmydevnotebook_com=self.webpackChunkmydevnotebook_com||[]).push([[1567],{5226:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Welcome","href":"/","docId":"index","unlisted":false},{"type":"category","label":"Agile","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Scrum Cheat Sheet","href":"/Agile/scrum-cheatsheet","docId":"Agile/scrum-cheatsheet","unlisted":false}]},{"type":"category","label":"Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Architecture Notes","href":"/Architecture/Overview","docId":"Architecture/Overview","unlisted":false},{"type":"link","label":"Caching Strategies (with a focus on microservices)","href":"/Architecture/caching","docId":"Architecture/caching","unlisted":false},{"type":"link","label":"Why modernise legacy systems","href":"/Architecture/whyModernise","docId":"Architecture/whyModernise","unlisted":false}]},{"type":"category","label":"Artificial Intelligence","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Artificial Intelligence (AI)","href":"/Artificial Intelligence/ai","docId":"Artificial Intelligence/ai","unlisted":false}]},{"type":"category","label":"Design Patterns and Principles","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"The Adapter Pattern","href":"/Design Patterns and Principles/adapter","docId":"Design Patterns and Principles/adapter","unlisted":false},{"type":"link","label":"The Bridge Pattern","href":"/Design Patterns and Principles/bridge","docId":"Design Patterns and Principles/bridge","unlisted":false},{"type":"link","label":"Composition vs Inheritance","href":"/Design Patterns and Principles/composition","docId":"Design Patterns and Principles/composition","unlisted":false},{"type":"link","label":"Compound Patterns","href":"/Design Patterns and Principles/compound","docId":"Design Patterns and Principles/compound","unlisted":false},{"type":"link","label":"Commonality Variability Analysis","href":"/Design Patterns and Principles/cva","docId":"Design Patterns and Principles/cva","unlisted":false},{"type":"link","label":"Decorator Pattern","href":"/Design Patterns and Principles/decorator","docId":"Design Patterns and Principles/decorator","unlisted":false},{"type":"link","label":"Design Principles","href":"/Design Patterns and Principles/design-principles","docId":"Design Patterns and Principles/design-principles","unlisted":false},{"type":"link","label":"The Facade Pattern","href":"/Design Patterns and Principles/facade","docId":"Design Patterns and Principles/facade","unlisted":false},{"type":"link","label":"The Factory Method Pattern","href":"/Design Patterns and Principles/factory","docId":"Design Patterns and Principles/factory","unlisted":false},{"type":"link","label":"The Fragile Base Class Problem","href":"/Design Patterns and Principles/fragile","docId":"Design Patterns and Principles/fragile","unlisted":false},{"type":"link","label":"The Strategy Pattern","href":"/Design Patterns and Principles/strategy","docId":"Design Patterns and Principles/strategy","unlisted":false}]},{"type":"link","label":"Recent Blog Posts","href":"/blog"}]},"docs":{"Agile/scrum-cheatsheet":{"id":"Agile/scrum-cheatsheet","title":"Scrum Cheat Sheet","description":"Meetings and Ceremonies","sidebar":"tutorialSidebar"},"Architecture/caching":{"id":"Architecture/caching","title":"Caching Strategies (with a focus on microservices)","description":"caching strategies, topologies, eviction strategies etc from a microservice perspective","sidebar":"tutorialSidebar"},"Architecture/Overview":{"id":"Architecture/Overview","title":"Architecture Notes","description":"Architecture is about balancing requirements to try and come up with something that\'s the least worst solution.","sidebar":"tutorialSidebar"},"Architecture/whyModernise":{"id":"Architecture/whyModernise","title":"Why modernise legacy systems","description":"Why should you consider modernising from legacy systems that are all mainly working just fine?","sidebar":"tutorialSidebar"},"Artificial Intelligence/ai":{"id":"Artificial Intelligence/ai","title":"Artificial Intelligence (AI)","description":"General into to artificial intelligence (AI)","sidebar":"tutorialSidebar"},"Design Patterns and Principles/adapter":{"id":"Design Patterns and Principles/adapter","title":"The Adapter Pattern","description":"Adapter pattern class diagram","sidebar":"tutorialSidebar"},"Design Patterns and Principles/bridge":{"id":"Design Patterns and Principles/bridge","title":"The Bridge Pattern","description":"The bridge pattern is similar to the strategy pattern, where you define a family of algorithms, encapsulate each one, and make them interchangeable.  Strategy lets the algorithm vary independently from clients that use it. The bridge pattern decouples an abstraction from its implementation so that the two can vary independently.","sidebar":"tutorialSidebar"},"Design Patterns and Principles/composition":{"id":"Design Patterns and Principles/composition","title":"Composition vs Inheritance","description":"Composition and inheritance class diagram","sidebar":"tutorialSidebar"},"Design Patterns and Principles/compound":{"id":"Design Patterns and Principles/compound","title":"Compound Patterns","description":"Compound patterns class diagram","sidebar":"tutorialSidebar"},"Design Patterns and Principles/cva":{"id":"Design Patterns and Principles/cva","title":"Commonality Variability Analysis","description":"A principle of good software design is to separate things that change from those that do not. Commonality variability","sidebar":"tutorialSidebar"},"Design Patterns and Principles/decorator":{"id":"Design Patterns and Principles/decorator","title":"Decorator Pattern","description":"Decorator pattern class diagram","sidebar":"tutorialSidebar"},"Design Patterns and Principles/design-principles":{"id":"Design Patterns and Principles/design-principles","title":"Design Principles","description":"These are some of the more important design principles and strategies to consider during your OOP software design and development activities.","sidebar":"tutorialSidebar"},"Design Patterns and Principles/facade":{"id":"Design Patterns and Principles/facade","title":"The Facade Pattern","description":"Facade pattern class diagram","sidebar":"tutorialSidebar"},"Design Patterns and Principles/factory":{"id":"Design Patterns and Principles/factory","title":"The Factory Method Pattern","description":"Factory method pattern class diagram","sidebar":"tutorialSidebar"},"Design Patterns and Principles/fragile":{"id":"Design Patterns and Principles/fragile","title":"The Fragile Base Class Problem","description":"The fragile base class problem is caused by the use of implementation inheritance. It occurs when a derived class extends a base class, using some of the methods or attributes in the base class.","sidebar":"tutorialSidebar"},"Design Patterns and Principles/strategy":{"id":"Design Patterns and Principles/strategy","title":"The Strategy Pattern","description":"strategy pattern class diagram","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Welcome","description":"Welcome to my blog and collection of notes mainly concerning software engineering.","sidebar":"tutorialSidebar"}}}}')}}]);