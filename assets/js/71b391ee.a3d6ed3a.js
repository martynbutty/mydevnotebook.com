"use strict";(self.webpackChunkmydevnotebook_com=self.webpackChunkmydevnotebook_com||[]).push([[182],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8201:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l}});var n=r(3117),a=(r(7294),r(3905));const o={title:"The Factory Method Pattern"},i=void 0,c={unversionedId:"Design Patterns and Principles/factory",id:"Design Patterns and Principles/factory",title:"The Factory Method Pattern",description:"Factory method pattern class diagram",source:"@site/docs/Design Patterns and Principles/factory.md",sourceDirName:"Design Patterns and Principles",slug:"/Design Patterns and Principles/factory",permalink:"/Design Patterns and Principles/factory",draft:!1,tags:[],version:"current",frontMatter:{title:"The Factory Method Pattern"},sidebar:"tutorialSidebar",previous:{title:"The Facade Pattern",permalink:"/Design Patterns and Principles/facade"},next:{title:"The Fragile Base Class Problem",permalink:"/Design Patterns and Principles/fragile"}},s={},l=[],u={toc:l},p="wrapper";function f(e){let{components:t,...o}=e;return(0,a.kt)(p,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Factory method pattern class diagram",src:r(9655).Z,width:"800",height:"315"})),(0,a.kt)("p",null,"The factory method pattern is used when a class needs to instantiate a derivation of another class, but does not know which one. The factory method allows a derived class to make this decision."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Product is the interface for the type of object that the factory creates"),(0,a.kt)("li",{parentName:"ul"},"Creator is the interface that defines the Factory Method"),(0,a.kt)("li",{parentName:"ul"},"Clients will need to subclass Creator to make a particular ConcreteProduct"),(0,a.kt)("li",{parentName:"ul"},"The abstract method FactoryMethod() is implemented in the concrete class and it knows the rules to enable it to create and return the appropriate concrete product.")))}f.isMDXComponent=!0},9655:function(e,t,r){t.Z=r.p+"assets/images/factory-c35061b83d5a4494f200fa0a84d76bbc.png"}}]);