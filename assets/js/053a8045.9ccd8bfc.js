"use strict";(self.webpackChunkmydevnotebook_com=self.webpackChunkmydevnotebook_com||[]).push([[8247],{503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(4848),r=n(8453);const a={title:"Decorator Pattern"},i=void 0,s={id:"Design Patterns and Principles/decorator",title:"Decorator Pattern",description:"Decorator pattern class diagram",source:"@site/docs/Design Patterns and Principles/decorator.md",sourceDirName:"Design Patterns and Principles",slug:"/Design Patterns and Principles/decorator",permalink:"/Design Patterns and Principles/decorator",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Decorator Pattern"},sidebar:"tutorialSidebar",previous:{title:"Commonality Variability Analysis",permalink:"/Design Patterns and Principles/cva"},next:{title:"Design Principles",permalink:"/Design Patterns and Principles/design-principles"}},c={},d=[];function l(e){const t={code:"code",em:"em",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.RP)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Decorator pattern class diagram",src:n(613).A+"",width:"800",height:"516"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"decorator pattern"})," is used to attach additional responsibilities to an object ",(0,o.jsx)(t.em,{children:"dynamically"}),". The object provides\nthe basic functionality, but you need a variety of additional functionality to be added at run-time.\nFor example, you want to add a header and / or footer to an invoice print, and the header or footer can also vary.\nThe power of the Decorator pattern is that the instantiation of the chain of objects is completely ",(0,o.jsx)(t.strong,{children:"decoupled"})," from the\nclient objects that use the decorated ",(0,o.jsx)(t.code,{children:"ConcreteComponent"}),". It allows for extending the functionality of an object without\nresorting to sub-classing."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ConcreteComponent"})," is the class having the functionality added to it by wrapping it with successive ",(0,o.jsx)(t.code,{children:"ConcreteDecorators"}),"\nin a chain. The chain of instantiation ",(0,o.jsx)(t.strong,{children:"always"})," ends with the ",(0,o.jsx)(t.code,{children:"ConcreteComponent"}),". Create an abstract class that\nrepresents the original class and the new functions to be added. In the decorators, place the new function call before\nor after the trailing calls to get the correct order."]}),"\n",(0,o.jsxs)(t.p,{children:["The Decorator's inheritance of ",(0,o.jsx)(t.code,{children:"Component"})," is for type matching, ",(0,o.jsx)(t.strong,{children:"not"})," to inherit behaviour.\nThe decorator wraps a ",(0,o.jsx)(t.code,{children:"Component"})," because it ",(0,o.jsx)(t.em,{children:"aggregates"})," it, i.e. it holds a pointer to it.\n",(0,o.jsx)(t.code,{children:"Decorator"})," is shown as abstract, the concrete decorator classes can add new methods and/or attributes; but typically by\ndoing computation before or after an existing method in the ",(0,o.jsx)(t.code,{children:"Component"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"Some example code for the creation of an object, and subsequent wrapping with decorators is found below"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:"Component myComponent;  \n\nmyComponent = new SalesTicket();  \nmyComponent = new Footer1(myComponent);  \nmyComponent = new Header1(myComponent);  \n\nreturn myComponent;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The chain can be identified by reading the code backwards. The ",(0,o.jsx)(t.code,{children:"Header1"})," decorator wraps ",(0,o.jsx)(t.code,{children:"Footer1"}),", and as per the rules\nof the decorator pattern, the chain ends with the ",(0,o.jsx)(t.code,{children:"SalesTicket"})," object. In an assumed ",(0,o.jsx)(t.code,{children:"print()"})," method, the decorators\ncould add something to be printed before calling the next object in the chains ",(0,o.jsx)(t.code,{children:"print()"})," method, or after."]})]})}function h(e={}){const{wrapper:t}={...(0,r.RP)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},613:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/decorator_pattern-15cf8921747672c1f23a7bb146b9a1f9.png"},8453:(e,t,n)=>{n.d(t,{RP:()=>a});var o=n(6540);const r=o.createContext({});function a(e){const t=o.useContext(r);return o.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}}}]);