"use strict";(self.webpackChunkmydevnotebook_com=self.webpackChunkmydevnotebook_com||[]).push([[479],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=o,d=u["".concat(c,".").concat(h)]||u[h]||m[h]||i;return n?a.createElement(d,r(r({ref:t},p),{},{components:n})):a.createElement(d,r({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8419:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],s={title:"Composition vs Inheritance"},c=void 0,l={unversionedId:"Design Patterns and Principles/composition",id:"Design Patterns and Principles/composition",title:"Composition vs Inheritance",description:"Composition and inheritance class diagram",source:"@site/docs/Design Patterns and Principles/composition.md",sourceDirName:"Design Patterns and Principles",slug:"/Design Patterns and Principles/composition",permalink:"/Design Patterns and Principles/composition",tags:[],version:"current",frontMatter:{title:"Composition vs Inheritance"},sidebar:"tutorialSidebar",previous:{title:"The Bridge Pattern",permalink:"/Design Patterns and Principles/bridge"},next:{title:"Compound Patterns",permalink:"/Design Patterns and Principles/compound"}},p=[{value:"Choosing between composition and inheritance",id:"choosing-between-composition-and-inheritance",children:[],level:2}],m={toc:p};function u(e){var t=e.components,s=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Composition and inheritance class diagram",src:n(9236).Z})),(0,i.kt)("p",null,"So how exactly do ",(0,i.kt)("strong",{parentName:"p"},"composition")," and ",(0,i.kt)("strong",{parentName:"p"},"inheritance")," compare? Here are several points of comparison:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is easier to ",(0,i.kt)("strong",{parentName:"li"},"change the interface of a back-end class")," (composition) than a superclass (inheritance). A change\nto the interface of a back-end class necessitates a change to the front-end class ",(0,i.kt)("em",{parentName:"li"},"implementation"),", but not necessarily\nthe front-end interface. Code that depends only on the front-end interface still works, so long as the front-end interface\nremains the same. By contrast, a change to a superclass's interface can not only ripple down the inheritance hierarchy\nto subclasses, but can also ripple out to code that uses just the subclass's interface see the ",(0,i.kt)("a",{parentName:"li",href:"fragile"},"fragile base class"),"\nfor an example."),(0,i.kt)("li",{parentName:"ul"},"It is easier to ",(0,i.kt)("strong",{parentName:"li"},"change the interface of a front-end class ")," (composition) than a subclass (inheritance). Just as\nsuperclasses can be fragile, ",(0,i.kt)("strong",{parentName:"li"},"subclasses can be rigid"),". You can't just change a subclass's interface without\nmaking sure the subclass's new interface is compatible with that of its parent (supertypes). For example, you can't\nadd to a subclass a method with the same signature but a different return type as a method inherited from a superclass.\nComposition, on the other hand, allows you to change the interface of a front-end class without affecting back-end classes."),(0,i.kt)("li",{parentName:"ul"},"Composition",(0,i.kt)("em",{parentName:"li"},"allows you to ",(0,i.kt)("strong",{parentName:"em"},"delay the creation of back-end objects")," until (and unless) they are needed, as well as\nchanging the back-end objects dynamically throughout the lifetime of the front-end object. With _inheritance"),", you get\nthe image of the superclass in your subclass object image as soon as the subclass is created, and it remains part of\nthe subclass object throughout the lifetime of the subclass."),(0,i.kt)("li",{parentName:"ul"},"It is ",(0,i.kt)("strong",{parentName:"li"},"easier to add new subclasses")," (inheritance) than it is to add new front-end classes (composition), because\n",(0,i.kt)("strong",{parentName:"li"},"inheritance comes with polymorphism"),". If you have a bit of code that relies only on a superclass interface, that\ncode can work with a new subclass without change. This is not true of composition, unless you use composition with interfaces.\nUsed together, ",(0,i.kt)("strong",{parentName:"li"},"composition and abstract (or interface) classes")," make a very powerful design tool."),(0,i.kt)("li",{parentName:"ul"},"The explicit ",(0,i.kt)("strong",{parentName:"li"},"method-invocation forwarding")," (or delegation) approach of composition will often have a ",(0,i.kt)("strong",{parentName:"li"},"performance\ncost")," as compared to inheritance's single invocation of an inherited superclass method implementation."),(0,i.kt)("li",{parentName:"ul"},"With both composition and inheritance, ",(0,i.kt)("strong",{parentName:"li"},"changing the implementation")," (not the interface) of any class is easy.\nThe ripple effect of implementation changes remain inside the same class.")),(0,i.kt)("h2",{id:"choosing-between-composition-and-inheritance"},"Choosing between composition and inheritance"),(0,i.kt)("p",null,"So how do all these comparisons between composition and inheritance help you in your designs? Here are a few guidelines\nthat reflect how I tend to select between composition and inheritance."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Make sure inheritance models the ",(0,i.kt)("em",{parentName:"strong"},"is-a")," relationship.")," The main guiding philosophy is that inheritance should be used\nonly when a subclass ",(0,i.kt)("em",{parentName:"p"},"is-a")," superclass. For example, an ",(0,i.kt)("inlineCode",{parentName:"p"},"Apple")," likely ",(0,i.kt)("em",{parentName:"p"},"is-a")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Fruit"),", so I would be inclined to use inheritance.\nAn important question to ask yourself when you think you have an ",(0,i.kt)("em",{parentName:"p"},"is-a")," relationship is whether that ",(0,i.kt)("em",{parentName:"p"},"is-a")," relationship\nwill be constant throughout the lifetime of the application and, with luck, the lifecycle of the code. For example, you might\nthink that an ",(0,i.kt)("inlineCode",{parentName:"p"},"Employee")," ",(0,i.kt)("em",{parentName:"p"},"is-a")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Person"),", when really ",(0,i.kt)("inlineCode",{parentName:"p"},"Employee")," represents a role that a ",(0,i.kt)("inlineCode",{parentName:"p"},"Person")," plays part of the time.\nWhat if the person becomes unemployed? What if the person is both an ",(0,i.kt)("inlineCode",{parentName:"p"},"Employee")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Supervisor"),"? Such impermanent ",(0,i.kt)("em",{parentName:"p"},"is-a"),"\nrelationships should usually be modeled with composition."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't use inheritance just to get code reuse")," If all you really want is to reuse code and there is no ",(0,i.kt)("em",{parentName:"p"},"is-a")," relationship\nin sight, use composition."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't use inheritance just to get at polymorphism")," If all you really want is polymorphism, but there is no natural\n",(0,i.kt)("em",{parentName:"p"},"is-a")," relationship, use composition with abstract classes."))}u.isMDXComponent=!0},9236:function(e,t,n){t.Z=n.p+"assets/images/composition_vs_inheritance-fc075ca37f3b97395936570c79e20d0e.png"}}]);