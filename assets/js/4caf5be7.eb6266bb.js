"use strict";(self.webpackChunkmydevnotebook_com=self.webpackChunkmydevnotebook_com||[]).push([[681],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return p}});var i=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,i,a=function(e,t){if(null==e)return{};var r,i,a={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(r),m=a,p=h["".concat(l,".").concat(m)]||h[m]||d[m]||n;return r?i.createElement(p,o(o({ref:t},u),{},{components:r})):i.createElement(p,o({ref:t},u))}));function p(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,o=new Array(n);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[h]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<n;c++)o[c]=r[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9433:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return n},metadata:function(){return s},toc:function(){return c}});var i=r(3117),a=(r(7294),r(3905));const n={},o="Architecture Notes",s={unversionedId:"Architecture/Overview",id:"Architecture/Overview",title:"Architecture Notes",description:"Architecture is about balancing requirements to try and come up with something that's the least worst solution.",source:"@site/docs/Architecture/Overview.md",sourceDirName:"Architecture",slug:"/Architecture/Overview",permalink:"/Architecture/Overview",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Scrum Cheat Sheet",permalink:"/Agile/scrum-cheatsheet"},next:{title:"Caching Strategies (with a focus on microservices)",permalink:"/Architecture/caching"}},l={},c=[{value:"Anti-Patterns",id:"anti-patterns",level:2},{value:"Architecture Patterns",id:"architecture-patterns",level:2},{value:"Architectural Characteristics",id:"architectural-characteristics",level:2},{value:"Architecture Styles",id:"architecture-styles",level:2},{value:"Service Based Architecture",id:"service-based-architecture",level:3},{value:"Modular Monolith",id:"modular-monolith",level:3},{value:"Monoliths",id:"monoliths",level:3},{value:"Event-Driven",id:"event-driven",level:3},{value:"Space Based",id:"space-based",level:3},{value:"Microservices Challenge",id:"microservices-challenge",level:3},{value:"Hybrid Architecture",id:"hybrid-architecture",level:3},{value:"Distributed Architecture Consdierations",id:"distributed-architecture-consdierations",level:2},{value:"The Fallacies of Distributed Computing",id:"the-fallacies-of-distributed-computing",level:2},{value:"The Network is Reliable",id:"the-network-is-reliable",level:3},{value:"Latency is Zero",id:"latency-is-zero",level:3},{value:"Service Granularity",id:"service-granularity",level:2},{value:"Granularity Disintegrators",id:"granularity-disintegrators",level:3},{value:"Granularity Integrators",id:"granularity-integrators",level:3}],u={toc:c},h="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(h,(0,i.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"architecture-notes"},"Architecture Notes"),(0,a.kt)("p",null,"Architecture is about balancing requirements to try and come up with something that's the ",(0,a.kt)("strong",{parentName:"p"},"least worst")," solution. "),(0,a.kt)("p",null,"In most systems, you can't satisfy one architectual characterisitic without that having an impact on other characterisitcs. Search for ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},'"ship called the Vasa"'))," for an example of what can go wrong if you try to do too much. "),(0,a.kt)("p",null,"For example if you want your system to be highly secure, then you may have to sacrifice some performance becuase of the extra processing overhead of security concerns."),(0,a.kt)("h2",{id:"anti-patterns"},"Anti-Patterns"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cover your assets - Avoiding making any decision for fear of making the wrong one"),(0,a.kt)("li",{parentName:"ul"},"Groundhog day - nobody understands why a decision was made so it keeps getting discussed over and over (hint - ADR's can help here)"),(0,a.kt)("li",{parentName:"ul"},"Email driven architecture - People forget / lose / don't know / didn't read / weren't around when an email about an architecture\ndecision was sent, therefore don't implement it correctly (ADR's can help here too!)")),(0,a.kt)("h2",{id:"architecture-patterns"},"Architecture Patterns"),(0,a.kt)("p",null,'CQRS is a pattern, but not a style. The difference spans from questions like "is CQRS a pattern, and is microkernel\ndifferent from CQRS?" I.e. you can deploy a ',(0,a.kt)("em",{parentName:"p"},"pattern")," like CQRS into systems using the architectural ",(0,a.kt)("em",{parentName:"p"},"styles")," like microservices,\nspace based, event driven and modular monolith etc."),(0,a.kt)("h2",{id:"architectural-characteristics"},"Architectural Characteristics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A non-domain design consideration"),(0,a.kt)("li",{parentName:"ul"},"Influences some structural aspect of the design"),(0,a.kt)("li",{parentName:"ul"},"Critical or important to application success")),(0,a.kt)("h2",{id:"architecture-styles"},"Architecture Styles"),(0,a.kt)("h3",{id:"service-based-architecture"},"Service Based Architecture"),(0,a.kt)("p",null,"Is a hybrid of microservices. Well defined domains deployed as separate units. Shared data like modular monolith (unlike\nmicroservices where each service owns its own data)"),(0,a.kt)("h3",{id:"modular-monolith"},"Modular Monolith"),(0,a.kt)("p",null,"Becoming more popular. Single deployment unit with functionality grouped by domain. Popular with DDD."),(0,a.kt)("p",null,"Can be a good start point to get something out the door to prove it, save money, evolve the architecture or if you're just\nnot sure if a distributed architecture will work."),(0,a.kt)("p",null,"Next step might be to move to ",(0,a.kt)("strong",{parentName:"p"},"service based architecture:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Take all the domain area's (e.g. by namespace in code like app.customer.*)"),(0,a.kt)("li",{parentName:"ul"},"Pull them individually out of the modular monolith so they's an independently deployable unit of software (but shared DB maybe)"),(0,a.kt)("li",{parentName:"ul"},"Look at each of these domains to see which could/should be deployed as single purpose functions (i.e. ",(0,a.kt)("strong",{parentName:"li"},"microservices"),")")),(0,a.kt)("h3",{id:"monoliths"},"Monoliths"),(0,a.kt)("p",null,'Service oriented architecture (SOA) and Layered are still viable in the right place. Especially if using integrated communications between heterogeneous enterprise systems (eg an ESB). So a micro frontend using REST and JSON can invoke a request that goes all the way down to old\nlegacy "stuff" eg a Cobol mainframe / AS400 / C++, then it comes all the way back up the layers.'),(0,a.kt)("h3",{id:"event-driven"},"Event-Driven"),(0,a.kt)("p",null,"Is the latest hype, even though it's a fairly old architecture style. It's a ",(0,a.kt)("strong",{parentName:"p"},"reactive")," architecture, more complex and\nnon-deterministic. Workflows are pushing this trend. Lots of complexity like testing and event timing."),(0,a.kt)("h3",{id:"space-based"},"Space Based"),(0,a.kt)("p",null,"Comes from the computer science term ",(0,a.kt)("strong",{parentName:"p"},"tuple space"),". Multiple parallel processors with shared memory. Therefore all\ntransactional data is cached in memory and DB is not used in the interactions of transactional processing. Provides\nhighest volumes of elasticity, scalability and performance out of any of the architectural styles, because it removes\nthe DB limiting constraint (bottleneck)."),(0,a.kt)("h3",{id:"microservices-challenge"},"Microservices Challenge"),(0,a.kt)("p",null,"How to manage the transactionality when data is split between different bounded contexts?"),(0,a.kt)("p",null,"Encapsulate business behaviour behind a platform, e.g. a group of microservices behind an API layer. The API layer can\nhave a slow rate of change, therefore introducing stability and reuse."),(0,a.kt)("h3",{id:"hybrid-architecture"},"Hybrid Architecture"),(0,a.kt)("p",null,"Service based, microservices architecture. Where not all of a system have to be microservices. Do all the area's meet the\ncharacteristics of microservices?"),(0,a.kt)("p",null,"Microservices-event driven (or event driven microservices)"),(0,a.kt)("h2",{id:"distributed-architecture-consdierations"},"Distributed Architecture Consdierations"),(0,a.kt)("h2",{id:"the-fallacies-of-distributed-computing"},"The Fallacies of Distributed Computing"),(0,a.kt)("p",null,"Suggested by L. Peter Deutsch and colleagues from Sun Microsystems in 1994, these fallacies still hold worthy consideration\ntoday. ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"},"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing")," "),(0,a.kt)("h3",{id:"the-network-is-reliable"},"The Network is Reliable"),(0,a.kt)("p",null,"Do not assume that the network is reliable, even though they have become more reliable over time, they remain generally\nunreliable. Distributed architectures rely on the network for communication between services. Even though all the services\nmay be up and healthy, if they cannot communicate with each other the system as a whole may not be healthy. Make sure\nto consider things like timeouts and circuit breakers to prevent phenomena like cascade failures."),(0,a.kt)("h3",{id:"latency-is-zero"},"Latency is Zero"),(0,a.kt)("p",null,"When you call some method in another service using something like REST or RPC, the measurment of time is usually in milliseconds.\nCompare that to internal method calls where we're measuring in nano or microseconds."),(0,a.kt)("h2",{id:"service-granularity"},"Service Granularity"),(0,a.kt)("h3",{id:"granularity-disintegrators"},"Granularity Disintegrators"),(0,a.kt)("p",null,"Reasons to separate services"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Service functionality")," (cohesion)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Code volatility")," - do some parts not change much (examination of git hostory could inform?). Would a single service mean some aspect is down for\nan unrelated change (e.g. deploy of something else)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scalability and Throughput")," - mean time to start (MTTS). Does one thing take a long time to start but others are\nreally quick?"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Fault Tolerance")," - If one aspect goes down a lot, it would take other aspects down that are grouped into the single\nservice - mean time to recovery (MTTR)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Data Security")," - would one aspect benefit from more or greater security")),(0,a.kt)("h3",{id:"granularity-integrators"},"Granularity Integrators"),(0,a.kt)("p",null,"Favours monoliths. Converse of above granularity disintegrators, i.e. here are reasons to combine services"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DB transactions - Do you need ACID more than something else?"),(0,a.kt)("li",{parentName:"ul"},'Workflow choreography - network, security and data latency. Big ball of "distributed" mud. E.g. few ms for security\nprocessing, few more for network, more still for data, multiplied by "n" calls per second means a potential large\ncumulative latency. This can become worse still if you need timeout-retries, data consistency considerations etc'),(0,a.kt)("li",{parentName:"ul"},"Data dependencies - If two services need the same data, might they be better as a single service to avoid calling each\nother and the data consistency problem therin")))}d.isMDXComponent=!0}}]);